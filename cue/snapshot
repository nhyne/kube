
// /Users/adamjohnson/developer/kube/cue
service: {
}
deployment: {
}

// /Users/adamjohnson/developer/kube/cue/archiver
service: {
}
deployment: {
}

// /Users/adamjohnson/developer/kube/cue/archiver/base
service: {
    "archiver-api": {
        kind:       "Service"
        apiVersion: "v1"
        metadata: {
            name: "archiver-api"
            labels: {
                app:       "archiver-api"
                domain:    "prod"
                component: "archiver-api"
            }
            namespace: "archiver"
        }
        spec: {
            ports: [{
                name:       "client"
                port:       443
                protocol:   "TCP"
                targetPort: 8000
            }]
            selector: {
                app:       "archiver-api"
                domain:    "prod"
                component: "archiver-api"
            }
            type: "LoadBalancer"
        }
    }
}
deployment: {
    "archiver-api": {
        kind:       "Deployment"
        apiVersion: "apps/v1"
        metadata: {
            name: "archiver-api"
            labels: {
                component: "archiver-api"
            }
        }
        spec: {
            selector: {
                matchLabels: {
                    app: "archiver-api"
                }
            }
            replicas: 1
            template: {
                metadata: {
                    labels: {
                        app:       "archiver-api"
                        domain:    "prod"
                        component: "archiver-api"
                    }
                }
                spec: {
                    containers: [{
                        name: "archiver-api"
                        env: [{
                            name:  "DATABASE_URL"
                            value: "postgres://something:somethingelse@postgres:5432/archiver"
                        }]
                        ports: [{
                            protocol:      "TCP"
                            containerPort: 8000
                        }]
                        image: "nhyne/archiver-api:0.0.1-alpha"
                    }]
                }
            }
            revisionHistoryLimit: 10
        }
    }
}
namespace: {
    archiver: {
        kind:       "Namespace"
        apiVersion: "v1"
        metadata: {
            name: "archiver"
            labels: {
                name: "archiver"
            }
        }
    }
}

// /Users/adamjohnson/developer/kube/cue/archiver/overlays/minikube
service: {
    postgres: {
        kind:       "Service"
        apiVersion: "v1"
        metadata: {
            name: "postgres"
            labels: {
                app:       "postgres"
                domain:    "prod"
                component: "archiver-api"
            }
        }
        spec: {
            ports: [{
                name:       "client"
                port:       5432
                protocol:   "TCP"
                targetPort: 5432
            }]
            selector: {
                app:       "postgres"
                domain:    "prod"
                component: "archiver-api"
            }
        }
    }
}
deployment: {
    "archiver-api": {
        kind:       "Deployment"
        apiVersion: "apps/v1"
        metadata: {
            name: "archiver-api"
        }
        spec: {
            replicas: 1
            template: {
                metadata: {
                    labels: {
                        app:       "archiver-api"
                        domain:    "prod"
                        component: "archiver-api"
                    }
                }
                spec: {
                    containers: [{
                        name: "archiver-api"
                    }]
                    initContainers: [{
                        name:  "sleep"
                        image: "alpine:3.10.1"
                        command: ["sleep"]
                        args: ["30"]
                    }]
                }
            }
        }
    }
    postgres: {
        kind:       "Deployment"
        apiVersion: "apps/v1"
        metadata: {
            name: "postgres"
            labels: {
                app:       "postgres"
                component: "archiver-api"
            }
        }
        spec: {
            selector: {
                matchLabels: {
                    app: "postgres"
                }
            }
            replicas: 1
            template: {
                metadata: {
                    labels: {
                        app:       "postgres"
                        domain:    "prod"
                        component: "archiver-api"
                    }
                }
                spec: {
                    containers: [{
                        name: "postgres"
                        env: [{
                            name:  "POSTGRES_USER"
                            value: "something"
                        }, {
                            name:  "POSTGRES_PASSWORD"
                            value: "somethingelse"
                        }, {
                            name:  "POSTGRES_DB"
                            value: "archiver"
                        }]
                        ports: [{
                            protocol:      "TCP"
                            containerPort: 5432
                        }]
                        image: "postgres:11.5-alpine"
                    }]
                }
            }
            revisionHistoryLimit: 10
        }
    }
}
job: {
    "diesel-setup": {
        kind:       "Job"
        apiVersion: "batch/v1"
        metadata: {
            name: "diesel-setup"
            labels: {
                app: "diesel"
            }
        }
        spec: {
            template: {
                spec: {
                    containers: [{
                        name: "diesel"
                        env: [{
                            name:  "DATABASE_URL"
                            value: "postgres://something:somethingelse@postgres:5432/archiver"
                        }]
                        image: "nhyne/diesel-cli:postgres-11.4"
                        command: ["diesel"]
                        args: ["setup"]
                        volumeMounts: [{
                            name:      "git"
                            mountPath: "/home"
                        }]
                        workingDir: "/home/archiver-api/"
                    }]
                    restartPolicy: "Never"
                    initContainers: [{
                        name:  "git-sync"
                        image: "nhyne/git-sync:1.0.0__linux_amd64"
                        command: ["/git-sync"]
                        args: ["--repo=https://github.com/nhyne/archiver-api", "--branch=develop", "--one-time"]
                        volumeMounts: [{
                            name:      "git"
                            mountPath: "/tmp/git"
                        }]
                    }, {
                        name:  "ls"
                        image: "alpine:latest"
                        command: ["ls"]
                        args: ["-la", "/home/archiver-api"]
                        volumeMounts: [{
                            name:      "git"
                            mountPath: "/home"
                        }]
                    }]
                    volumes: [{
                        name: "git"
                        emptyDir: {
                        }
                    }]
                }
            }
        }
    }
}

// /Users/adamjohnson/developer/kube/cue/archiver/overlays/prod
service: {
    postgres: {
        kind:       "Service"
        apiVersion: "v1"
        metadata: {
            name: "postgres"
            labels: {
                app:       "postgres"
                domain:    "prod"
                component: "archiver-api"
            }
        }
        spec: {
            ports: [{
                name:       "client"
                port:       5432
                protocol:   "TCP"
                targetPort: 5432
            }]
            selector: {
                app:       "postgres"
                domain:    "prod"
                component: "archiver-api"
            }
        }
    }
}
deployment: {
}
endpoints: {
    postgres: {
        kind:       "Endpoints"
        apiVersion: "v1"
        metadata: {
            name: "postgres"
            labels: {
                app:       "postgres"
                component: "archiver-api"
            }
        }
        subsets: [{
            ports: [{
                port: 5432
            }]
            addresses: [{
                ip: "10.0.2.2"
            }]
        }]
    }
}

// /Users/adamjohnson/developer/kube/cue/drone
service: {
}
deployment: {
}

// /Users/adamjohnson/developer/kube/cue/drone/base
service: {
}
deployment: {
}
namespace: {
    drone: {
        kind:       "Namespace"
        apiVersion: "v1"
        metadata: {
            name: "drone"
            labels: {
                name: "drone"
            }
        }
    }
}

// /Users/adamjohnson/developer/kube/cue/drone/overlays/prod
service: {
    "drone-server": {
        kind:       "Service"
        apiVersion: "v1"
        metadata: {
            name: "drone-server"
            labels: {
                app:       "drone-server"
                domain:    "prod"
                component: "drone"
                apps:      "drone-server"
            }
            annotations: {
                "external-dns.alpha.kubernetes.io/hostname": "drone.nhyne.dev."
            }
        }
        spec: {
            ports: [{
                name:       "http"
                port:       80
                protocol:   "TCP"
                targetPort: "http-port"
            }, {
                name:       "https"
                port:       443
                protocol:   "TCP"
                targetPort: "https-port"
            }]
            selector: {
                app:       "drone-server"
                domain:    "prod"
                component: "drone"
                apps:      "drone-server"
            }
            type: "LoadBalancer"
        }
    }
}
deployment: {
}
statefulSet: {
    "drone-server": {
        kind:       "StatefulSet"
        apiVersion: "apps/v1"
        metadata: {
            name: "drone-server"
            labels: {
                app: "drone-server"
            }
        }
        spec: {
            selector: {
                matchLabels: {
                    app: "drone-server"
                }
            }
            replicas: 1
            template: {
                metadata: {
                    labels: {
                        app: "drone-server"
                    }
                    annotations: {
                        "linkerd.io/inject": "enabled"
                    }
                }
                spec: {
                    containers: [{
                        name: "drone-server"
                        env: [{
                            name:  "DRONE_KUBERNETES_ENABLED"
                            value: "true"
                        }, {
                            name:  "DRONE_KUBERNETES_NAMESPACE"
                            value: "drone"
                        }, {
                            name:  "DRONE_LOGS_DEBUG"
                            value: "true"
                        }, {
                            name:  "DRONE_ADMIN"
                            value: "nhyne"
                        }, {
                            name:  "DRONE_SERVER_HOST"
                            value: "drone.nhyne.dev"
                        }, {
                            name:  "DRONE_GITHUB"
                            value: "true"
                        }, {
                            name:  "DRONE_GITHUB_CLIENT_ID"
                            value: "a633f44f1ac044185bb3"
                        }, {
                            name:  "DRONE_TLS_AUTOCERT"
                            value: "true"
                        }, {
                            name: "DRONE_GITHUB_CLIENT_SECRET"
                            valueFrom: {
                                secretKeyRef: {
                                    name: "drone"
                                    key:  "client_secret"
                                }
                            }
                        }, {
                            name: "DRONE_RPC_SECRET"
                            valueFrom: {
                                secretKeyRef: {
                                    name: "drone"
                                    key:  "drone_rpc_secret"
                                }
                            }
                        }]
                        ports: [{
                            name:          "http-port"
                            containerPort: 80
                        }, {
                            name:          "https-port"
                            containerPort: 443
                        }]
                        image: "drone/drone:1.0.0"
                        volumeMounts: [{
                            name:      "drone-home"
                            mountPath: "/var/lib/drone"
                        }]
                    }]
                }
            }
            serviceName: "drone-server"
            volumeClaimTemplates: [{
                metadata: {
                    name: "drone-home"
                }
                spec: {
                    accessModes: ["ReadWriteOnce"]
                    resources: {
                        requests: {
                            storage: "1Gi"
                        }
                    }
                }
            }]
        }
    }
}
clusterRoleBinding: {
    "drone-rbac": {
        kind:       "ClusterRoleBinding"
        apiVersion: "rbac.authorization.k8s.io/v1beta1"
        metadata: {
            name: "drone-rbac"
            labels: {
                component: "drone"
            }
        }
        subjects: [{
            name:      "default"
            kind:      "ServiceAccount"
            namespace: "drone"
        }]
        roleRef: {
            name:     "cluster-admin"
            kind:     "ClusterRole"
            apiGroup: "rbac.authorization.k8s.io"
        }
    }
}

// /Users/adamjohnson/developer/kube/cue/kube-system
service: {
}
deployment: {
}

// /Users/adamjohnson/developer/kube/cue/kube-system/overlays/prod
service: {
    "kubernetes-dashboard": {
        kind:       "Service"
        apiVersion: "v1"
        metadata: {
            name: "kubernetes-dashboard"
            labels: {
                app:       "kubernetes-dashboard"
                domain:    "prod"
                component: "kubernetes-dashboard"
                "k8s-app": "kubernetes-dashboard"
            }
            namespace: "kube-system"
        }
        spec: {
            ports: [{
                name:       "client"
                port:       443
                protocol:   "TCP"
                targetPort: 8443
            }]
            selector: {
                app:       "kubernetes-dashboard"
                domain:    "prod"
                component: "kubernetes-dashboard"
                "k8s-app": "kubernetes-dashboard"
            }
            type: "LoadBalancer"
        }
    }
}
deployment: {
    "kubernetes-dashboard": {
        kind:       "Deployment"
        apiVersion: "apps/v1"
        metadata: {
            name: "kubernetes-dashboard"
            labels: {
                component: "kubernetes-dashboard"
                "k8s-app": "kubernetes-dashboard"
            }
            namespace: "kube-system"
        }
        spec: {
            selector: {
                matchLabels: {
                    "k8s-app": "kubernetes-dashboard"
                }
            }
            replicas: 1
            template: {
                metadata: {
                    labels: {
                        app:       "kubernetes-dashboard"
                        domain:    "prod"
                        component: "kubernetes-dashboard"
                        "k8s-app": "kubernetes-dashboard"
                    }
                }
                spec: {
                    containers: [{
                        name: "kubernetes-dashboard"
                        ports: [{
                            protocol:      "TCP"
                            containerPort: 8443
                        }]
                        image: "k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1"
                        args: ["--auto-generate-certificates"]
                        volumeMounts: [{
                            name:      "kubernetes-dashboard-certs"
                            mountPath: "/certs"
                        }, {
                            name:      "tmp-volume"
                            mountPath: "/tmp"
                        }]
                        livenessProbe: {
                            httpGet: {
                                path:   "/"
                                port:   8443
                                scheme: "HTTPS"
                            }
                            initialDelaySeconds: 30
                            timeoutSeconds:      30
                        }
                    }]
                    volumes: [{
                        name: "kubernetes-dashboard-certs"
                        secret: {
                            secretName: "kubernetes-dashboard-certs"
                        }
                    }, {
                        name: "tmp-volume"
                        emptyDir: {
                        }
                    }]
                    serviceAccountName: "kubernetes-dashboard"
                    tolerations: [{
                        key:    "node-role.kubernetes.io/master"
                        effect: "NoSchedule"
                    }]
                }
            }
            revisionHistoryLimit: 10
        }
    }
}
secret: {
    "kubernetes-dashboard-certs": {
        kind:       "Secret"
        apiVersion: "v1"
        metadata: {
            name: "kubernetes-dashboard-certs"
            labels: {
                "k8s-app": "kubernetes-dashboard"
            }
            namespace: "kube-system"
        }
        type: "Opaque"
    }
}
serviceAccount: {
    "kubernetes-dashboard": {
        kind:       "ServiceAccount"
        apiVersion: "v1"
        metadata: {
            name: "kubernetes-dashboard"
            labels: {
                "k8s-app": "kubernetes-dashboard"
            }
            namespace: "kube-system"
        }
    }
}
role: {
    "kubernetes-dashboard-minimal": {
        kind:       "Role"
        apiVersion: "rbac.authorization.k8s.io/v1"
        metadata: {
            name:      "kubernetes-dashboard-minimal"
            namespace: "kube-system"
        }
        rules: [{
            resources: ["secrets"]
            apiGroups: [""]
            verbs: ["create"]
        }, {
            resources: ["configmaps"]
            apiGroups: [""]
            verbs: ["create"]
        }, {
            resources: ["secrets"]
            apiGroups: [""]
            verbs: ["get", "update", "delete"]
            resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
        }, {
            resources: ["configmaps"]
            apiGroups: [""]
            verbs: ["get", "update"]
            resourceNames: ["kubernetes-dashboard-settings"]
        }, {
            resources: ["services"]
            apiGroups: [""]
            verbs: ["proxy"]
            resourceNames: ["heapster"]
        }, {
            resources: ["services/proxy"]
            apiGroups: [""]
            verbs: ["get"]
            resourceNames: ["heapster", "http:heapster:", "https:heapster:"]
        }]
    }
}
roleBinding: {
    "kubernetes-dashboard-minimal": {
        kind:       "RoleBinding"
        apiVersion: "rbac.authorization.k8s.io/v1"
        metadata: {
            name:      "kubernetes-dashboard-minimal"
            namespace: "kube-system"
        }
        subjects: [{
            name:      "kubernetes-dashboard"
            kind:      "ServiceAccount"
            namespace: "kube-system"
        }]
        roleRef: {
            name:     "kubernetes-dashboard-minimal"
            kind:     "Role"
            apiGroup: "rbac.authorization.k8s.io"
        }
    }
}

// /Users/adamjohnson/developer/kube/cue/utility
service: {
}
deployment: {
}

// /Users/adamjohnson/developer/kube/cue/utility/base
service: {
}
deployment: {
}
namespace: {
    utility: {
        kind:       "Namespace"
        apiVersion: "v1"
        metadata: {
            name: "utility"
            labels: {
                name: "utility"
            }
        }
    }
}

// /Users/adamjohnson/developer/kube/cue/utility/overlays/prod
service: {
}
deployment: {
    "external-dns": {
        kind:       "Deployment"
        apiVersion: "apps/v1"
        metadata: {
            name: "external-dns"
        }
        spec: {
            replicas: 1
            template: {
                metadata: {
                    labels: {
                        app:       "external-dns"
                        domain:    "prod"
                        component: "external-dns"
                    }
                }
                spec: {
                    metadata: {
                        labels: {
                            component: "external-dns"
                        }
                    }
                    containers: [{
                        name:  "external-dns"
                        image: "registry.opensource.zalan.do/teapot/external-dns:v0.5.11"
                        args: ["--source=service", "--source=ingress", "--domain-filter=nhyne.dev", "--domain-filter=nhyne.io", "--domain-filter=adamjohnson.dev", "--domain-filter=johnsona.dev", "--provider=google", "--registry=txt", "--txt-owner-id=nhyne-kube-utility"]
                    }]
                    serviceAccountName: "external-dns"
                }
            }
            strategy: {
                type: "Recreate"
            }
        }
    }
}
clusterRoleBinding: {
    "external-dns-viewer": {
        kind:       "ClusterRoleBinding"
        apiVersion: "rbac.authorization.k8s.io/v1beta1"
        metadata: {
            name: "external-dns-viewer"
        }
        subjects: [{
            name:      "external-dns"
            kind:      "ServiceAccount"
            namespace: "utility"
        }]
        roleRef: {
            name:     "external-dns"
            kind:     "ClusterRole"
            apiGroup: "rbac.authorization.k8s.io"
        }
    }
}
serviceAccount: {
    "external-dns": {
        kind:       "ServiceAccount"
        apiVersion: "v1"
        metadata: {
            name: "external-dns"
        }
    }
}
clusterRole: {
    "external-dns": {
        kind:       "ClusterRole"
        apiVersion: "rbac.authorization.k8s.io/v1beta1"
        metadata: {
            name: "external-dns"
        }
        rules: [{
            resources: ["services"]
            apiGroups: [""]
            verbs: ["get", "watch", "list"]
        }, {
            resources: ["pods"]
            apiGroups: [""]
            verbs: ["get", "watch", "list"]
        }, {
            resources: ["ingresses"]
            apiGroups: ["extensions"]
            verbs: ["get", "watch", "list"]
        }, {
            resources: ["nodes"]
            apiGroups: [""]
            verbs: ["list"]
        }]
    }
}
